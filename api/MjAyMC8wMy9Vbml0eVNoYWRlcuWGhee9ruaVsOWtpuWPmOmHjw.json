{"title":"UnityShader内置数学变量","date":"2020-03-14T15:32:32.000Z","date_formatted":{"ll":"Mar 14, 2020","L":"03/14/2020","MM-DD":"03-14"},"link":"2020/03/UnityShader内置数学变量","comments":true,"tags":["Unity"],"categories":["笔记"],"updated":"2020-03-15T07:43:46.588Z","content":"<h2 id=\"unity内置变换矩阵和常见用法\">Unity内置变换矩阵和常见用法<a href=\"#unity内置变换矩阵和常见用法\" title=\"Unity内置变换矩阵和常见用法\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>变量名</th><th>描述</th></tr>\n</thead><tbody><tr>\n<td>UNITY_MATRIX_V</td><td>当前模型的观察矩阵，从世界空间到观察空间 <strong>(V-&gt;世界空间-观察矩阵)</strong></td></tr>\n<tr>\n<td>UNITY_MATRIX_P</td><td>当前模型的投影矩阵，从观察空间到裁剪空间 <strong>(P-&gt;观察空间-裁剪空间)</strong></td></tr>\n<tr>\n<td>UNITY_MATRIX_VP</td><td>观察·投影矩阵,从世界空间变换到裁剪空间 <strong>(VP-&gt;世界空间-裁剪空间)</strong></td></tr>\n<tr>\n<td>UNITY_MATRIX_MVP</td><td>模型·观察·投影矩阵，从模型空间变换到裁剪空间 <strong>(MVP-&gt;模型空间-裁剪空间)</strong></td></tr>\n<tr>\n<td>UNITY_MATRIX_MV</td><td>模型·观察矩阵，从模型空间变换到观察空间 <strong>(MV-&gt;模型空间-观察空间)</strong></td></tr>\n<tr>\n<td>UNITY_MATRIX_T_MV</td><td>UNITY_MATRIX_MV的转置矩阵(在UNITY_MATRIX_MV为正交矩阵的情况下，它的逆矩阵就是UNITY_MATRIX_T_MV)。当模型的变换 <strong>只有旋转和统一缩放(假设缩放系数为K)</strong> 的时候，UNITY_MATRIX_MV的逆矩阵就是<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.047ex\" height=\"5.343ex\" style=\"vertical-align: -2.005ex;\" viewBox=\"0 -1437.2 881.5 2300.3\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">\\frac{1}{k}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n<g transform=\"translate(120,0)\">\n<rect stroke=\"none\" width=\"641\" height=\"60\" x=\"0\" y=\"220\"></rect>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"70\" y=\"676\"></use>\n <use xlink:href=\"#E1-MJMATHI-6B\" x=\"60\" y=\"-715\"></use>\n</g>\n</g>\n</svg>UNITY_MATRIX_MV</td></tr>\n<tr>\n<td>UNITY_MATRIX_IT_MV</td><td>UNITY_MATRIX_MV的逆转置矩阵，<strong>用于将法线从模型空间变换到观察空间</strong> 。可以用于得到UNITY_MATRIX_MV的逆矩阵。</td></tr>\n<tr>\n<td>_Object2World</td><td>当前模型矩阵，从模型空间变换到世界空间</td></tr>\n<tr>\n<td>_World2Object</td><td>_Object2World的逆矩阵，从世界空间变换到模型空间</td></tr>\n</tbody></table></div></div><p>以上变量都是float4x4类型</p>\n<h2 id=\"unity内置的摄像机和屏幕参数\">Unity内置的摄像机和屏幕参数<a href=\"#unity内置的摄像机和屏幕参数\" title=\"Unity内置的摄像机和屏幕参数\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>变量名</th><th>类型</th><th>描述</th></tr>\n</thead><tbody><tr>\n<td>_WorldSpaceCameraPos</td><td>float3</td><td>摄像机在世界空间中的位置</td></tr>\n<tr>\n<td>_ProjectionParams</td><td>float4</td><td>x=1.0 或 x=-1.0, y=Near, z=Far, w=1.0+1.0/Far</td></tr>\n<tr>\n<td>_ScreenParams</td><td>float4</td><td>x=width, y=height, z=1.0+1.0/width， w=1.0+1.0/height。 width和height分别是该摄像机渲染目标的像素宽度和高度</td></tr>\n<tr>\n<td>_ZBufferParams</td><td>float4</td><td>x=1-Far/Near, y=Far/Near, z=x/Far, w=y/Far,变量用于线性化Z缓存中的深度值</td></tr>\n<tr>\n<td>_unity_OrthoParams</td><td>float4</td><td>x=width, y=height, z没有定义, w=1.0(是正交摄像机),w=0.0(是透视摄像机)。width和height是正交投影摄像机的宽度和高度(屏幕分辨率)</td></tr>\n<tr>\n<td>unity_CameraProject</td><td>float4x4</td><td>摄像机的投影矩阵</td></tr>\n<tr>\n<td>unity_CameraInvProject</td><td>float4x4</td><td>摄像机投影矩阵的逆矩阵</td></tr>\n<tr>\n<td>unity_CameraWorldClipPlanes[6]</td><td>float4</td><td>摄像机的6个裁剪平面在世界空间下的等式，顺序是：左-&gt;右-&gt;下-&gt;上-&gt;近-&gt;远裁剪平面</td></tr>\n</tbody></table></div></div><h2 id=\"computescreenposvposwpos\">ComputeScreenPos/VPOS/WPOS<a href=\"#computescreenposvposwpos\" title=\"ComputeScreenPos/VPOS/WPOS\"></a></h2><ul><li>ComputeScreenPos是Unity内置的函数，返回齐次坐标系下的屏幕坐标值</li><li>VPOS是HLSL中对屏幕像素坐标的语义</li><li>WPOS是CG中对屏幕坐标的语义</li></ul><p>VPOS和WPOS在Unity中是等价的，都是float4类型</p>\n<h3 id=\"片元在视口空间中的坐标\">片元在视口空间中的坐标<a href=\"#片元在视口空间中的坐标\" title=\"片元在视口空间中的坐标\"></a></h3><h4 id=\"使用vposwpos\">使用VPOS/WPOS<a href=\"#使用vposwpos\" title=\"使用VPOS/WPOS\"></a></h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fixed4 <span class=\"title\">frag</span>(<span class=\"params\">float4 sp : VPOS</span>) : SV_Target</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fixed4(sp.xy/_ScreenParams.xy,<span class=\"number\">0.0</span>,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>sp.xy</code>代表了屏幕空间中的像素坐标, <code>_ScreenParams.xy</code>是屏幕分辨率</p>\n<h4 id=\"使用computescreenpos\">使用ComputeScreenPos<a href=\"#使用computescreenpos\" title=\"使用ComputeScreenPos\"></a></h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> verOut&#123;</span><br><span class=\"line\">  float4 pos : SV_POSITION;</span><br><span class=\"line\">  float4 scrPOS : TEXCOORD0;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">vertOut <span class=\"title\">vert</span>(<span class=\"params\">appdata_base v</span>)</span>&#123;</span><br><span class=\"line\">  vertOut o;</span><br><span class=\"line\">  o.pos = mul(UNITY_MATRIX_MVP, v.vertex);<span class=\"comment\">//将顶点坐标转换为裁剪空间坐标</span></span><br><span class=\"line\">  o.scrPos = ComputeScreenPos(o.pos);<span class=\"comment\">//的到屏幕坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">fiexd4 <span class=\"title\">frag</span>(<span class=\"params\">vertOut i</span>)</span>&#123;</span><br><span class=\"line\">  float2 wcoord = (i.scrPos.xy/i.scrPos.w);<span class=\"comment\">//齐次除法，的到范围在[-1,1]的NDC</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fixed4(wcoord,<span class=\"number\">0.0</span>,<span class=\"number\">1.0</span>);<span class=\"comment\">//坐标映射到范围在[0，1]的视口空间下，的到视口空间中的坐标</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算的一些注意项\">运算的一些注意项<a href=\"#运算的一些注意项\" title=\"运算的一些注意项\"></a></h2><ul><li>Unity内置矩阵默认是按<strong>列存储</strong>的,所以变换时一般使用右乘方式</li><li>CG中float4x4等类型是按<strong>行优先方式</strong>填充的</li><li>Unity脚本中Matrix4x4类型采用的是列优先方式</li></ul><blockquote>\n<p>摘录自Unity Shader入门精要 4.8</p>\n</blockquote>\n","next":{"title":"BlazorWebAssembly-PreRendering","link":"2020/03/BlazorWebAssembly-PreRendering"},"plink":"https://vrjure.github.io/2020/03/UnityShader内置数学变量/","toc":[{"id":"unity内置变换矩阵和常见用法","title":"Unity内置变换矩阵和常见用法","index":"1"},{"id":"unity内置的摄像机和屏幕参数","title":"Unity内置的摄像机和屏幕参数","index":"2"},{"id":"computescreenposvposwpos","title":"ComputeScreenPos&#x2F;VPOS&#x2F;WPOS","index":"3","children":[{"id":"片元在视口空间中的坐标","title":"片元在视口空间中的坐标","index":"3.1"}]},{"id":"运算的一些注意项","title":"运算的一些注意项","index":"4"}],"reward":true,"copyright":{"link":"<a href=\"https://vrjure.github.io/2020/03/UnityShader内置数学变量/\" title=\"UnityShader内置数学变量\">https://vrjure.github.io/2020/03/UnityShader内置数学变量/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}